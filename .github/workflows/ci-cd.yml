# ci-cd.yml ‚Äî Publish to Buildkite Registry

name: CI/CD - Publish to Buildkite Registry

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # üü° Step 1: Checkout the Repository
      - name: Check out repository
        uses: actions/checkout@v2

      # üü° Step 2: Set Up Python and Poetry
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry --version

      # üü° Step 3: Configure Poetry for Buildkite Registry
      - name: Configure Poetry for Buildkite Registry
        run: |
          poetry config repositories.buildkite https://api.buildkite.com/v2/packages/organizations/zen-of-code/registries/zenofcode-models/packages
          poetry config http-basic.buildkite "__token__" "${{ secrets.BUILDKITE_TOKEN }}"

      # üü° Step 4: Verify BUILDKITE_TOKEN
      - name: Verify BUILDKITE_TOKEN
        run: |
          if [ -z "${{ secrets.BUILDKITE_TOKEN }}" ]; then
            echo "‚ùå BUILDKITE_TOKEN is not set"
            exit 1
          else
            echo "‚úÖ BUILDKITE_TOKEN is set"
          fi

      # üü° Step 5: Install Dependencies
      - name: Install Dependencies
        run: poetry install --with dev

      # üü° Step 6: Build Package
      - name: Build Package
        run: poetry build

      # üü¢ Step 7: Publish Dev Version (for PRs)
      - name: Publish Dev Version (for PRs)
        if: github.event_name == 'pull_request'
        env:
          BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
        run: |
          CURRENT_VERSION=$(poetry version --short || echo "0.1.0")
          DEV_VERSION="${CURRENT_VERSION}.dev${{ github.event.number }}+${{ github.run_number }}"
          echo "Setting dynamic PR version: ${DEV_VERSION}"
          poetry version "$DEV_VERSION"
          poetry build
          curl -X POST "https://api.buildkite.com/v2/packages/organizations/zen-of-code/registries/zenofcode-models/packages" \
               -H "Authorization: Bearer ${BUILDKITE_TOKEN}" \
               -F "file=@dist/zenofcode_models-${DEV_VERSION}.tar.gz"

      # üü¢ Step 8: Publish Stable Version (on Merge to Main)
      - name: Publish Stable Version (on Merge)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          BUILDKITE_TOKEN: ${{ secrets.BUILDKITE_TOKEN }}
        run: |
          STABLE_VERSION=$(poetry version --short)
          echo "Releasing stable version: $STABLE_VERSION"
          poetry build
          curl -X POST "https://api.buildkite.com/v2/packages/organizations/zen-of-code/registries/zenofcode-models/packages" \
               -H "Authorization: Bearer ${BUILDKITE_TOKEN}" \
               -F "file=@dist/zenofcode_models-${STABLE_VERSION}.tar.gz"
